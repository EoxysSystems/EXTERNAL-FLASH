/* File			: nuv_m2354_hal_public.h
* Author		: Rajesh
* Company		: Eoxys Systems India Private Limited
* Description	: Public driver implementation. It contains all the enums
* Created on	:
* Version 		: V11
*/
/*----------------------------------------------------------------------------
* 							Standard library includes
*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------
* 							User Includes
*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------
* 							Types Declarations
*----------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------
* 							Local definitions
*----------------------------------------------------------------------------*/

#ifndef NUV_M2354_HAL_PUBLIC_H_
#define NUV_M2354_HAL_PUBLIC_H_
#ifdef __cplusplus
extern "C" {
#endif

#include "NuMicro.h"

#define TIMEOUT_1_SECS_ABS		1UL
#define TIMEOUT_3_SECS_ABS		3UL
#define TIMEOUT_5_SECS_ABS		5UL

#define XNO_I2C_BUS_CLOCK_100K      100000UL
#define XNO_I2C_BUS_CLOCK_400K      400000UL

#define XNO_SPI_BUS_CLOCK_4M        4000000UL
#define XNO_SPI_BUS_CLOCK_48M       48000000UL
#define XNO_SPI_BUS_CLOCK_8M        8000000UL
#define XNO_SPI_BUS_CLOCK_12M       12000000UL
#define XNO_SPI_BUS_CLOCK_16M       16000000UL

typedef enum {
	RESET = 0, SET = !RESET
} FlagStatus, ITStatus;

typedef enum {
	UART_RESET = 0, UART_SET = !UART_RESET
} UARTStatus;

typedef enum {
	ON = 0U, OFF
} IO_State;

typedef enum {
	XNO_DISABLE = 0, XNO_ENABLE = !XNO_DISABLE
} FunctionalState;

typedef enum {
	SUCCESS = 0, ERROR = !SUCCESS
} ErrorStatus;

typedef enum {
	HAL_OK = 0x00, HAL_ERROR = 0x01, HAL_BUSY = 0x02, HAL_TIMEOUT = 0x03
} HAL_StatusTypeDef;

typedef enum {
	GPIO_PIN_RESET = 0U, GPIO_PIN_SET
} GPIO_PinState;

typedef enum{
	AT_NONE_RCVD,
	AT_OK_RCVD,
	AT_ERROR_RCVD,
	AT_ECHO_RCVD,
	AT_RESP_RCVD,
	AT_TIMEOUT_RCVD,
}XNO_ATCMD_RESP;

typedef enum {
	XNO_NONE,
	XNO_OK,
	XNO_ERROR,
	XNO_TIMEOUT,
	XNO_INVALID_PARAMETER,
	XNO_RTC_DISABLED,
	// Wifi related error codes
	XNO_WIFI_AP_NOT_AVAIL,
	XNO_WIFI_AP_CONN_FAIL,
	XNO_WIFI_INVALID_STS_ID,
	XNO_WIFI_MAX_LEN_EXCEEDS,
	XNO_WIFI_SOC_DATA_UNAVAILABLE,
	// Lte related error codes
	XNO_LTE_AP_NOT_AVAIL,
	XNO_LTE_AP_CONN_FAIL,
	XNO_LTE_INVALID_STS_ID,
	XNO_LTE_MAX_LEN_EXCEEDS,
	XNO_LTE_SOC_DATA_UNAVAILABLE,

	// WIFI_HTTP related error codes
	XNO_HTTP_INVALID_PARAMETER,
	XNO_HTTP_INVALID_HRDID,
	// WIFI_MQTT related error codes
	XNO_MQTT_INVALID_KEY,

	//Flash related error codes
	XNO_FLASH_BUF_MAX_LEN_EXCEEDS,
	XNO_FLASH_READ_FAIL,
	XNO_FLASH_WRITE_FAIL,
	XNO_FLASH_ERASE_FAIL,
	XNO_FLASH_WRITE_SUCCESS,
	// LTE related
	XNO_LTE_MAX_DATA_SIZE_EXCEEDS,
	XNO_TIMEOUT_LIMIT_EXCEEDS,
	XNO_LTE_CONN_NOT_ESTABLISED,

	// LTE RECEIVED DATA codes
	XNO_LTE_DATA_RECEIVED,
	XNO_LTE_DATA_NOT_RECEIVED,

	// LTE MQTT broker connection error codes
	SQNSMQTT_ERR_SUCCESS,
	SQNSMQTT_ERR_NOMEM,
	SQNSMQTT_ERR_PROTOCOL,
	SQNSMQTT_ERR_INVAL,
	SQNSMQTT_ERR_NO_CONN,
	SQNSMQTT_ERR_CONN_REFUSED,
	SQNSMQTT_ERR_NOT_FOUND,
	SQNSMQTT_ERR_CONN_LOST,
	SQNSMQTT_ERR_TLS,
	SQNSMQTT_ERR_PAYLOAD_SIZE,
	SQNSMQTT_ERR_NOT_SUPPORTED,
	SQNSMQTT_ERR_AUTH,
	SQNSMQTT_ERR_ACL_DENIED,
	SQNSMQTT_ERR_UNKNOWN,
	SQNSMQTT_ERR_ERRNO,
	SQNSMQTT_ERR_EAI,
	SQNSMQTT_ERR_PROXY,
	SQNSMQTT_ERR_UNAVAILABLE,

	// GPS Uart error codes
	INVALID_SYNC_BYTES,
	INVALID_CHECKSUM,
	INVALID_LENGTH,
	INVALID_VALUE,
	OPERATION_FAILED,
	UNSUPPORTED_MID_MSID,

	// LTE MQTT broker subscription error codes
	PENDING,
	SUCCESSFUL,
	NOMEM,
	PROTOCOL,
	INVALID,
	NO_CONNECTION,
	CONNECTION_REFUSED,
	NOT_FOUND,
	CONNECTION_LOST,
	TLS_ERROR,
	PAYLOAD_SIZE_INVALID,
	NOT_SUPPORTED,
	AUTHENTICATION_ERROR,
	ACL_DENIED,
	UNKNOWN,
	ERRNO,
	EAI,
	PROXY_ERROR,

	// LTE HTTP  error codes
	HTTP_CONNECTION_SUCESS,
	CURL_ERROR,

	// LTE NIDD  error codes
	NIDD_APP_ACTIVATION_SUCESS,
	NIDD_APP_ACTIVATION_FAILED,
	NIDD_APP_DEREGISTRATION_SUCESS,
	NIDD_APP_DEREGISTRATION_FAILED,
	NIDD_DATA_SEND_SUCESS,
	NIDD_DATA_SEND_FAILED,

// LTE TCP error codes
	XNO_LTE_TCP_SUCCESS,
	XNO_LTE_TCP_NW_FAIL,
	XNO_LTE_TCP_NW_NOT_OPENED,
	XNO_LTE_TCP_WRONG_PARA,
	XNO_LTE_TCP_OPR_NOT_SUPPORTED,
	XNO_LTE_TCP_SOC_CRAEATION_FAILED,
	XNO_LTE_TCP_SOC_BIND_FAILED,
	XNO_LTE_TCP_SER_LISTENING,
	XNO_LTE_TCP_BUSY,
	XNO_LTE_TCP_SOC_OPENED,
	XNO_LTE_TCP_TIMEOUT,
	XNO_LTE_TCP_DNS_PARSER_FAILED,
	XNO_LTE_TCP_UNKNOWN_ERR,

	// LTE MQTT error codes
	XNO_LTE_MQTT_SUCCESS,
	XNO_LTE_MQTT_FAILED,
	XNO_LTE_MQTT_BAD_UTF_8_STRING,
	XNO_LTE_MQTT_SOCK_CONNECT_FAIL,
	XNO_LTE_MQTT_SOCK_CREATE_FAIL,
	XNO_LTE_MQTT_SOCK_CLOSE_FAIL,
	XNO_LTE_MQTT_MSG_RECEIVE_FAIL,
	XNO_LTE_MQTT_NETWORK_OPEN_FAIL,
	XNO_LTE_MQTT_NETWORK_CLOSE_FAIL,
	XNO_LTE_MQTT_NTEWORK_NOT_OPENED,
	XNO_LTE_MQTT_CLIENT_INDEX_ERROR,
	XNO_LTE_MQTT_NO_CONNECTION,
	XNO_LTE_MQTT_INVALID_PARAMETER,
	XNO_LTE_MQTT_NOT_SUPPORTED_OPERATION,
	XNO_LTE_MQTT_CLIENT_IS_BUSY,
	XNO_LTE_MQTT_REQUIRE_CONNECTION_FAIL,
	XNO_LTE_MQTT_SOCK_SENDING_FAIL,
	XNO_LTE_MQTT_TIMEOUT,
	XNO_LTE_MQTT_TOPIC_IS_EMPTY,
	XNO_LTE_MQTT_CLIENT_IS_USED,
	XNO_LTE_MQTT_CLIENT_NOT_ACQUIRED,
	XNO_LTE_MQTT_CLIENT_NOT_RELEASED,
	XNO_LTE_MQTT_LENGTH_OUT_OF_RANGE,
	XNO_LTE_MQTT_NTEWORK_IS_OPENED,
	XNO_LTE_MQTT_PACKET_FAIL,
	XNO_LTE_MQTT_DNS_ERROR,
	XNO_LTE_MQTT_SOCK_IS_CLOSED_BY_SERVER,
	XNO_LTE_MQTT_CONN_REFUSED_UNACCEPTED_PROTOCOL_VER,
	XNO_LTE_MQTT_CONN_REFUSED_IDENTIFIER_REJECTED,
	XNO_LTE_MQTT_CONN_REFUSED_SERVER_UNAVAILABLE,
	XNO_LTE_MQTT_CONN_REFUSED_BAD_USER_NAME_OR_PASSWORD,
	XNO_LTE_MQTT_CONN_REFUSED_NOT_AUTHORIZED,
	XNO_LTE_MQTT_HANDSHAKE_FAIL,
	XNO_LTE_MQTT_NOT_SET_CERTIFICATE,
	XNO_LTE_MQTT_OPEN_SESSION_FAILED,
	XNO_LTE_MQTT_DISCONNECT_FROM_THE_SERVER_FAILED,

	// LTE HTTP status codes
	XNO_LTE_HTTP_STS_CONTINUE =100,
	XNO_LTE_HTTP_STS_SWITCHING_PROTOCOLS,
	XNO_LTE_HTTP_STS_OK =200,
	XNO_LTE_HTTP_STS_CREATED,
	XNO_LTE_HTTP_STS_ACCEPTED,
	XNO_LTE_HTTP_STS_NON_AUTH_INFO,
	XNO_LTE_HTTP_STS_NO_CONTENT,
	XNO_LTE_HTTP_STS_RESET_CONTENT,
	XNO_LTE_HTTP_STS_PARTIAL_CONTENT,
	XNO_LTE_HTTP_STS_MUTIPLE_CHOICES = 300,
	XNO_LTE_HTTP_STS_MOVED_PERMNAENTLY,
	XNO_LTE_HTTP_STS_FOUND,
	XNO_LTE_HTTP_STS_SEE_OTHER,
	XNO_LTE_HTTP_STS_NOT_MODIFIED,
	XNO_LTE_HTTP_STS_TEMPORARY_REDIRECT,
	XNO_LTE_HTTP_STS_BAD_REQUEST = 400,
	XNO_LTE_HTTP_STS_UNAUTHORIZED,
	XNO_LTE_HTTP_STS_PAYMET_REQUIRED,
	XNO_LTE_HTTP_STS_FORBIDDEN,
	XNO_LTE_HTTP_STS_NOT_FOUND,
	XNO_LTE_HTTP_STS_METHOD_NOT_ALLOWED,
	XNO_LTE_HTTP_STS_NOT_AACEPTABLE,
	XNO_LTE_HTTP_STS_PROXY_AUTH_REQURIED,
	XNO_LTE_HTTP_STS_REQUEST_TIMEOUT,
	XNO_LTE_HTTP_STS_CONFLICT,
	XNO_LTE_HTTP_STS_GONE,
	XNO_LTE_HTTP_STS_LENGTH_REQUIRED,
	XNO_LTE_HTTP_STS_PRECONDITION_FAILED,
	XNO_LTE_HTTP_STS_REQ_ENITITY_TOO_LARGE,
	XNO_LTE_HTTP_STS_REQ_URI_TOO_LARGE,
	XNO_LTE_HTTP_STS_UNSUPPORTED_MEDIA_TYPE,
	XNO_LTE_HTTP_STS_REQ_RANGE_NOT_SATISFIABLE,
	XNO_LTE_HTTP_STS_EXPECTATION_FAILED,
	XNO_LTE_HTTP_STS_INTERNAL_SERVER_ERROR = 500,
	XNO_LTE_HTTP_STS_NOT_IMPLEMENTED,
	XNO_LTE_HTTP_STS_BAD_GATEWAY,
	XNO_LTE_HTTP_STS_SERVICE_UNAVAILABLE,
	XNO_LTE_HTTP_STS_GATEWAY_TIMEOUT,
	XNO_LTE_HTTP_STS_HTTP_VER_NOT_SUPPORTED,
	XNO_LTE_HTTP_STS_NOT_HTTP_PDU = 600,
	XNO_LTE_HTTP_STS_NETWORK_ERROR,
	XNO_LTE_HTTP_STS_NO_MEMORY,
	XNO_LTE_HTTP_STS_DNS_ERROR,
	XNO_LTE_HTTP_STS_STACK_BUSY,

	//LTE HTTP error codes
	XNO_HTTP_SUCCESS,
	XNO_HTTP_ALERT_STATE = 701,
	XNO_HTTP_UNKNOWN_ERROR,
	XNO_HTTP_BUSY,
	XNO_HTTP_CONN_CLOSED,
	XNO_HTTP_TIMEOUT,
	XNO_HTTP_SOCK_RECE_SEND_FAILED,
	XNO_HTTP_FILE_NOT_EXIST,
	XNO_HTTP_INVALID_PARA,
	XNO_HTTP_NETWORK_ERR,
	XNO_HTTP_NEW_SSL_SESSION_FAILED,
	XNO_HTTP_WRONG_STATE,
	XNO_HTTP_SOCK_CREATE_FAILED,
	XNO_HTTP_GET_DNS_FAILED,
	XNO_HTTP_SOCK_CONN_FAILED,
	XNO_HTTP_HANDSHAKE_FAILED,
	XNO_HTTP_SOCK_CLOSE_FAILED,
	XNO_HTTP_NO_NETWORK_ERR,
	XNO_HTTP_SEND_DATA_TIMEOUT,
	XNO_HTTP_CA_MISSED,
} XNO_ERR_STS;
typedef enum
{
	_UART0,
	_UART1,
	_UART2,
	_UART3,
	_UART4,
	_UART5,
	_UART_MAX
}XNO_UART_NUM_EM;

typedef enum
{
	_CAN0,
	_CAN_MAX
}XNO_CAN_NUM_EM;

typedef enum
{
	_I2C0,
	_I2C1,
	_I2C2,
	_I2C_MAX
}XNO_I2C_NUM_EM;

typedef enum
{
	_SPI0,
	_SPI1,
	_SPI2,
	_SPI3,
	_SPI_MAX
}XNO_SPI_NUM_EM;

typedef enum
{
	_EINT0,
	_EINT1,
	_EINT2,
	_EINT3,
	_EINT4,
	_EINT5,
	_EINT_MAX,
}XNO_EINT_NUM_EM;

typedef enum
{
	_EADC0,
	_EADC1,
	_EADC_MAX
}XNO_EADC_NUM_EM;
typedef enum
{
	XNO_EADC_SINGLE_ENDED 		= EADC_CTL_DIFFEN_SINGLE_END,
	XNO_EADC_DIFFERENTIAL 		= EADC_CTL_DIFFEN_DIFFERENTIAL
}XNO_EADC_MODE_EM;

typedef enum
{
	XNO_EADC_SOFTWARE_TRIGGER 		= EADC_SOFTWARE_TRIGGER,
	XNO_EADC_FALLING_EDGE_TRIGGER 	= EADC_FALLING_EDGE_TRIGGER,
	XNO_EADC_RISING_EDGE_TRIGGER 	= EADC_RISING_EDGE_TRIGGER,
	XNO_EADC_ADINT0_TRIGGER 		= EADC_ADINT0_TRIGGER,
	XNO_EADC_ADINT1_TRIGGER 		= EADC_ADINT1_TRIGGER,
	XNO_EADC_TIMER0_TRIGGER 		= EADC_TIMER0_TRIGGER,
	XNO_EADC_TIMER1_TRIGGER 		= EADC_TIMER1_TRIGGER,
	XNO_EADC_TIMER2_TRIGGER 		= EADC_TIMER2_TRIGGER,
	XNO_EADC_TIMER3_TRIGGER 		= EADC_TIMER3_TRIGGER,
	XNO_EADC_PWM0TG0_TRIGGER 		= EADC_PWM0TG0_TRIGGER,
	XNO_EADC_PWM0TG1_TRIGGER 		= EADC_PWM0TG1_TRIGGER,
	XNO_EADC_PWM0TG2_TRIGGER 		= EADC_PWM0TG2_TRIGGER,
	XNO_EADC_PWM0TG3_TRIGGER 		= EADC_PWM0TG3_TRIGGER,
	XNO_EADC_PWM0TG4_TRIGGER 		= EADC_PWM0TG4_TRIGGER,
	XNO_EADC_PWM0TG5_TRIGGER 		= EADC_PWM0TG5_TRIGGER,
	XNO_EADC_PWM1TG0_TRIGGER 		= EADC_PWM1TG0_TRIGGER,
	XNO_EADC_PWM1TG1_TRIGGER 		= EADC_PWM1TG1_TRIGGER,
	XNO_EADC_PWM1TG2_TRIGGER 		= EADC_PWM1TG2_TRIGGER,
	XNO_EADC_PWM1TG3_TRIGGER 		= EADC_PWM1TG3_TRIGGER,
	XNO_EADC_PWM1TG4_TRIGGER 		= EADC_PWM1TG4_TRIGGER,
	XNO_EADC_PWM1TG5_TRIGGER 		= EADC_PWM1TG5_TRIGGER,
	XNO_EADC_BPWM0TG_TRIGGER 		= EADC_BPWM0TG_TRIGGER,
	XNO_EADC_BPWM1TG_TRIGGER 		= EADC_BPWM1TG_TRIGGER,
}XNO_EADC_TRIGGER_SOURSE_EM;

typedef enum
{
	XNO_EINT_RISING	 	= GPIO_INT_RISING,
	XNO_EINT_FALLING	= GPIO_INT_FALLING,
	XNO_EINT_BOTH_EDGE 	= GPIO_INT_BOTH_EDGE,
	XNO_EINT_HIGH		= GPIO_INT_HIGH,
	XNO_EINT_LOW		= GPIO_INT_LOW
}XNO_EINT_TYPE_EM;

typedef enum {
	CAN_MSGSTS_NONE,
	CAN_MSGSTS_SENT,
	CAN_MSGSTS_RCVD
}CAN_MSG_OBJ_STS;

typedef enum {
	CAN_BASIC_TXOK_EVENT,
	CAN_BASIC_RXOK_EVENT,
	CAN_NORM_TXOK_EVENT,
	CAN_NORM_RXMSG_EVENT,
	CAN_NORM_RXOK_EVENT,
	CAN_ERROR_EVENT,
	CAN_EWARN_EVENT, //CAN error warning event
	CAN_BOFF_EVENT, // CAN bus-off event.
	CAN_WKUP_EVENT
}CAN_INT_CB_EVENTS;
typedef enum XNO_SPI_MODE_SELECT{
	XNO_SPI_MODE_0=SPI_MODE_0,
	XNO_SPI_MODE_1=SPI_MODE_1,
	XNO_SPI_MODE_2=SPI_MODE_2,
	XNO_SPI_MODE_3=SPI_MODE_3
}XNO_SPI_MODE_SELECT_EM;
typedef enum XNO_SPI_DATA_WIDTH{
	XNO_SPI_DATABIT_8=8,//SPI data width is 8-bit
	XNO_SPI_DATABIT_16=16,//SPI data width is 16-bit
	XNO_SPI_DATABIT_24=24,//SPI data width is 24-bit
	XNO_SPI_DATABIT_32=32//SPI data width is 32-bit
}XNO_SPI_DATA_WIDTH_EM;

typedef enum{
	XNO_GPIO_PORT_A,
	XNO_GPIO_PORT_B,
	XNO_GPIO_PORT_C,
	XNO_GPIO_PORT_D,
	XNO_GPIO_PORT_F,
	XNO_GPIO_PORT_NONE
}XNO_GPIO_PORT_EM;

typedef enum XNO_SPI_CS_GPIO_PIN{
	XNO_GPIO_PIN_0,
	XNO_GPIO_PIN_1,
	XNO_GPIO_PIN_2,
	XNO_GPIO_PIN_3,
	XNO_GPIO_PIN_4,
	XNO_GPIO_PIN_5,
	XNO_GPIO_PIN_6,
	XNO_GPIO_PIN_7,
	XNO_GPIO_PIN_8,
	XNO_GPIO_PIN_9,
	XNO_GPIO_PIN_10,
	XNO_GPIO_PIN_NONE
}XNO_GPIO_PIN_EM;
typedef struct
{
	XNO_GPIO_PORT_EM gpioPort;
	XNO_GPIO_PIN_EM gpioPin;
	uint32_t *gpioPtr;
}XNO_GPIO_ST;

typedef enum
{
	_DAC0,
	_DAC1,
	_DAC_MAX
}XNO_DAC_NUM_EM;

typedef enum
{
	  XNO_DAC_WRITE_DAT_TRIGGER		=	DAC_WRITE_DAT_TRIGGER,             /* :Write DAC_DAT trigger */
	  XNO_DAC_SOFTWARE_TRIGGER		=	DAC_SOFTWARE_TRIGGER,              /* :Software trigger */
	  XNO_DAC_LOW_LEVEL_TRIGGER		=	DAC_LOW_LEVEL_TRIGGER,             /* :STDAC pin low level trigger */
	  XNO_DAC_HIGH_LEVEL_TRIGGER	=	DAC_HIGH_LEVEL_TRIGGER,            /* :STDAC pin high level trigger */
	  XNO_DAC_FALLING_EDGE_TRIGGER	=	DAC_FALLING_EDGE_TRIGGER,          /* :STDAC pin falling edge trigger */
	  XNO_DAC_RISING_EDGE_TRIGGER	=	DAC_RISING_EDGE_TRIGGER,           /* :STDAC pin rising edge trigger */
	  XNO_DAC_TIMER0_TRIGGER		=	DAC_TIMER0_TRIGGER,                /* :Timer 0 trigger */
	  XNO_DAC_TIMER1_TRIGGE			=	DAC_TIMER1_TRIGGER,                /* :Timer 1 trigger */
	  XNO_DAC_TIMER2_TRIGGER		=	DAC_TIMER2_TRIGGER,                /* :Timer 2 trigger */
	  XNO_DAC_TIMER3_TRIGGER		=	DAC_TIMER3_TRIGGER,                /* :Timer 3 trigger */
	  XNO_DAC_EPWM0_TRIGGER			=	DAC_EPWM0_TRIGGER,                 /* :EPWM0 trigger */
	  XNO_DAC_EPWM1_TRIGGER			=	DAC_EPWM1_TRIGGER,                 /* :EPWM1 trigger */
	  /* @return None */
}XNO_DAC_TRIGGER_SOURSE_EM;

#ifdef __cplusplus
}
#endif
#endif /* NUV_M2354_HAL_PUBLIC_H_*/
